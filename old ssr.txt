##GL_VERTEX_SHADER
#version 330

layout (location = 0) in vec3 in_position;
layout (location = 1) in vec2 in_texCoords;

out vec2 texCoords;

void main()
{
	texCoords = in_texCoords;
	gl_Position = vec4(in_position, 1.f);
}



##GL_FRAGMENT_SHADER
#version 330

in vec2 texCoords;

uniform sampler2D positionTexture;
uniform sampler2D normalTexture;
uniform sampler2D colorTexture;
uniform sampler2D depthTexture;

uniform vec2 screenDim;

uniform mat4 proj;		// eye space to screen coordinates (NOT NDC)
uniform mat4 invProj;	// NDC to eye space

uniform vec2 clippingPlanes;

layout (location = 0) out vec4 fragColor;


float reconstructCSZ(float depthBufferValue, vec3 clipInfo) {
      return clipInfo.x / (depthBufferValue * clipInfo.y + clipInfo.z);
}

void swap(inout float a, inout float b) 
{
     float temp = a;
     a = b;
     b = temp;
}

float distanceSquared(vec2 a, vec2 b) {
    a -= b;
    return dot(a, a);
}

vec3 computeClipInfo(float zn, float zf) { 
    return vec3(zn  * zf, zn - zf, zf);
}

struct ray
{
	vec3 origin;
	vec3 direction;
};

/**
    \param csOrigin Camera-space ray origin, which must be 
    within the view volume and must have z < -0.01 and project within the valid screen rectangle

    \param csDirection Unit length camera-space ray direction

    \param projectToPixelMatrix A projection matrix that maps to pixel coordinates (not [-1, +1] normalized device coordinates)

    \param csZBuffer The depth or camera-space Z buffer, depending on the value of \a csZBufferIsHyperbolic

    \param csZBufferSize Dimensions of csZBuffer

    \param csZThickness Camera space thickness to ascribe to each pixel in the depth buffer
    
    \param csZBufferIsHyperbolic True if csZBuffer is an OpenGL depth buffer, false (faster) if
     csZBuffer contains (negative) "linear" camera space z values. Const so that the compiler can evaluate the branch based on it at compile time

    \param clipInfo See G3D::Camera documentation

    \param nearPlaneZ Negative number

    \param stride Step in horizontal or vertical pixels between samples. This is a float
     because integer math is slow on GPUs, but should be set to an integer >= 1

    \param jitterFraction  Number between 0 and 1 for how far to bump the ray in stride units
      to conceal banding artifacts

    \param maxSteps Maximum number of iterations. Higher gives better images but may be slow

    \param maxRayTraceDistance Maximum camera-space distance to trace before returning a miss

    \param hitPixel Pixel coordinates of the first intersection with the scene

    \param csHitPoint Camera space location of the ray hit

    Single-layer

 */

bool traceRay(vec3 rayOrigin, vec3 rayDirection, float thickness, float stride, float jitterFactor, float maxSteps, float maxRayTraceDistance,
	out vec2 hitPixel, out int whichLayer, out vec3 hitPoint)
{
	float nearPlane = clippingPlanes.x;
	float farPlane = clippingPlanes.y;
	vec3 clipInfo = computeClipInfo(nearPlane, farPlane);

	// Clip ray to a near plane in 3D (doesn't have to be *the* near plane, although that would be a good idea)
	float rayLength = ((rayOrigin.z + rayDirection.z * maxRayTraceDistance) > nearPlane) ?
                        (nearPlane - rayOrigin.z) / rayDirection.z :
                        maxRayTraceDistance;

	vec3 endPoint = rayDirection * rayLength + rayOrigin;

	// Project into screen space
    vec4 H0 = proj * vec4(rayOrigin, 1.0);
    vec4 H1 = proj * vec4(endPoint, 1.0);

    // There are a lot of divisions by w that can be turned into multiplications
    // at some minor precision loss...and we need to interpolate these 1/w values
    // anyway.
    //
    // Because the caller was required to clip to the near plane,
    // this homogeneous division (projecting from 4D to 2D) is guaranteed 
    // to succeed. 
    float k0 = 1.0 / H0.w;
    float k1 = 1.0 / H1.w;

    // Switch the original points to values that interpolate linearly in 2D
    vec3 Q0 = rayOrigin * k0; 
    vec3 Q1 = endPoint * k1;

	// Screen-space endpoints
    vec2 P0 = H0.xy * k0;
    vec2 P1 = H1.xy * k1;

	//P0 = (P0 * vec2(1.0, -1.0) + vec2(1.0)) * (screenDim); // ???
	//P1 = (P1 * vec2(1.0, -1.0) + vec2(1.0)) * (screenDim);
	
	//P0 = P0 * vec2(0.5, 0.5) + vec2(0.5);
	//P0 *= screenDim;
	//P1 = P1 * vec2(0.5, 0.5) + vec2(0.5);
	//P1 *= screenDim;



	// Initialize to off screen
    hitPixel = vec2(-1.0, -1.0);
    whichLayer = 0; // Only one layer

    // If the line is degenerate, make it cover at least one pixel
    // to avoid handling zero-pixel extent as a special case later
    P1 += vec2((distanceSquared(P0, P1) < 0.0001) ? 0.01 : 0.0);

    vec2 delta = P1 - P0;

    // Permute so that the primary iteration is in x to reduce
    // large branches later
    bool permute = false;
	if (abs(delta.x) < abs(delta.y)) {
		// More-vertical line. Create a permutation that swaps x and y in the output
		permute = true;

        // Directly swizzle the inputs
		delta = delta.yx;
		P1 = P1.yx;
		P0 = P0.yx;        
	}
    
	// From now on, "x" is the primary iteration direction and "y" is the secondary one

    float stepDirection = sign(delta.x);
    float invdx = stepDirection / delta.x;
    vec2 dP = vec2(stepDirection, invdx * delta.y);

    // Track the derivatives of Q and k
    vec3 dQ = (Q1 - Q0) * invdx;
    float dk = (k1 - k0) * invdx;

    // Scale derivatives by the desired pixel stride
	dP *= stride; dQ *= stride; dk *= stride;

	// Offset the starting values by the jitter fraction
	P0 += dP * jitterFactor; Q0 += dQ * jitterFactor; k0 += dk * jitterFactor;

	// Slide P from P0 to P1, (now-homogeneous) Q from Q0 to Q1, and k from k0 to k1
    vec3 Q = Q0;
    float k = k0;

	// We track the ray depth at +/- 1/2 pixel to treat pixels as clip-space solid 
	// voxels. Because the depth at -1/2 for a given pixel will be the same as at 
	// +1/2 for the previous iteration, we actually only have to compute one value 
	// per iteration.
	float prevZMaxEstimate = rayOrigin.z;
    float stepCount = 0.0;
    float rayZMax = prevZMaxEstimate, rayZMin = prevZMaxEstimate;
    float sceneZMax = rayZMax + 1e4;

    // P1.x is never modified after this point, so pre-scale it by 
    // the step direction for a signed comparison
    float end = P1.x * stepDirection;

    // We only advance the z field of Q in the inner loop, since
    // Q.xy is never used until after the loop terminates.

	for (vec2 P = P0;
        ((P.x * stepDirection) <= end) && 
        (stepCount < maxSteps) &&
        ((rayZMax < sceneZMax - thickness) ||
        (rayZMin > sceneZMax)) &&
        (sceneZMax != 0.0);
        P += dP, Q.z += dQ.z, k += dk, stepCount += 1.0) 
	{
                
		hitPixel = permute ? P.yx : P;

        // The depth range that the ray covers within this loop
        // iteration.  Assume that the ray is moving in increasing z
        // and swap if backwards.  Because one end of the interval is
        // shared between adjacent iterations, we track the previous
        // value and then swap as needed to ensure correct ordering
        rayZMin = prevZMaxEstimate;

        // Compute the value at 1/2 pixel into the future
        rayZMax = (dQ.z * 0.5 + Q.z) / (dk * 0.5 + k);
		prevZMaxEstimate = rayZMax;
        if (rayZMin > rayZMax) { swap(rayZMin, rayZMax); }

        // Camera-space z of the background
        sceneZMax = texelFetch(depthTexture, ivec2(hitPixel), 0).r;

        // This compiles away when csZBufferIsHyperbolic = false
        //if (csZBufferIsHyperbolic) {
            sceneZMax = reconstructCSZ(sceneZMax, clipInfo);
        //}
    } // pixel on ray

    Q.xy += dQ.xy * stepCount;
	hitPoint = Q * (1.0 / k);

    // Matches the new loop condition:
    return (rayZMax >= sceneZMax - thickness) && (rayZMin <= sceneZMax);
}







void main()
{
	vec3 color = texture2D(colorTexture, texCoords).rgb;
	vec3 position = texture2D(positionTexture, texCoords).xyz;
	vec3 normal = normalize(texture2D(normalTexture, texCoords).xyz);
	float shininess = texture2D(colorTexture, texCoords).a;


	vec3 v = normalize(position);
	vec3 rayDirection = reflect(v, normal);
	vec3 rayOrigin = position;

	float thickness = 1;
	float stride = 1.0;
	float jitterFactor = 1.0;
	float maxSteps = 60.0;
	float maxRayTraceDistance = 10.0;

	vec2 hitPixel;
	int whichLayer;
	vec3 hitPoint;

	bool result = traceRay(rayOrigin, rayDirection, thickness, stride, jitterFactor, maxSteps, maxRayTraceDistance, hitPixel, whichLayer, hitPoint);

	if (result)
	{
		vec2 tex = vec2(hitPixel.x / screenDim.x, (hitPixel.y / screenDim.y));
		//fragColor = texture2D(colorTexture, tex);
		fragColor = texelFetch(colorTexture, ivec2(hitPixel), 0);
		
	}
	else
	{
		fragColor = texture2D(colorTexture, texCoords);
		//fragColor = vec4(0.2);
	}
	
	gl_FragDepth = texture2D(depthTexture, texCoords).x;
}


